<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="$(TargetDir)SEToolbox.exe" #>
<#@ assembly name="$(TargetDir)Sandbox.Common.XmlSerializers.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SEToolbox.Support" #>
<#@ output extension=".cs" #>
namespace SEToolbox.Interop
{
    /// <summary>
    /// Generated by Text Templating on Game Engine data file 'CubeBlocks.sbc'.
    /// </summary>
    public enum SubtypeId
    {
        Empty = 0,

		// Although not enumerated in the SpaceEngineers API, I'm autogenerating enumerations 
		// direct from the game source here to make sure we have strongly typed names when generating content,
		// rather than relying upon hardcoded 'strings' which required maintenance.
		// When checking content read from 'world' saves however, we will have to rely upon the game data.

<#
        
		// Open the file @"C:\Program Files (x86)\Steam\SteamApps\common\SpaceEngineers\Content\Data\CubeBlocks.sbc";
		var appPath = ToolboxUpdater.GetApplicationFilePath();
		if (appPath == null)
		{
			Write("#warning Could not generate enums, because Space Engineers is not installed on the Developer machine. \r\n\r\n");
		}
		else
		{
			var filename = Path.Combine(appPath, @"Content\Data\CubeBlocks.sbc");

			XmlDocument xDoc = new XmlDocument();
			xDoc.Load(filename);

			var nav = xDoc.CreateNavigator();

			var definitions = nav.Select("MyObjectBuilder_CubeBlockDefinitions/Definitions/Definition");
			while (definitions.MoveNext())
			{
				var name = definitions.Current.SelectSingleNode("Id/SubtypeId").Value;

				if (definitions.Current.SelectSingleNode("Variants") != null)
				{
					Write(string.Format("        {0},\r\n", name));

					var variants = definitions.Current.Select("Variants/Variant");
					while (variants.MoveNext())
					{
						var variant = variants.Current.SelectSingleNode("@Color").Value;
						Write(string.Format("        {0}{1},\r\n", name, variant));
					}
				}
				else
				{
					if (!string.IsNullOrEmpty(name))
					{
						Write(string.Format("        {0},\r\n", name));
					}
				}
			}
		}

#>
    };
}